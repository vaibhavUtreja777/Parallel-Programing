#include <iostream>
#include <vector>
#include <limits>
#include <omp.h>

using namespace std;

#define INF numeric_limits<int>::max()

// Function to find the vertex with the minimum distance value
int minDistance(vector<int>& dist, vector<bool>& sptSet, int V) {
    int min = INF, min_index = -1;

    #pragma omp parallel for
    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] <= min) {
            #pragma omp critical
            {
                if (dist[v] < min) {
                    min = dist[v];
                    min_index = v;
                }
            }
        }
    }
    return min_index;
}

// Dijkstra's Algorithm using OpenMP for parallelism
void dijkstra(vector<vector<int>>& graph, int src, int V) {
    vector<int> dist(V, INF); // Shortest distance array
    vector<bool> sptSet(V, false); // True if vertex is included in shortest path tree

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet, V);
        if (u == -1) break; // If no minimum found, stop

        sptSet[u] = true;

        #pragma omp parallel for
        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Display the shortest distances
    cout << "Vertex \t Distance from Source\n";
    for (int i = 0; i < V; i++)
        cout << i << " \t " << (dist[i] == INF ? -1 : dist[i]) << endl;
}

int main() {
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V;
    cout << "Enter number of edges: ";
    cin >> E;

    vector<vector<int>> graph(V, vector<int>(V, 0));

    cout << "Enter edges (source, destination, weight):\n";
    for (int i = 0; i < E; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u][v] = w;
        graph[v][u] = w; // Assuming an undirected graph
    }

    int src;
    cout << "Enter source vertex: ";
    cin >> src;

    dijkstra(graph, src, V);

    return 0;
}
